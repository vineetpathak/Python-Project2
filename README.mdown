
# Linked List
* [Create Linked list](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/linked_list.py) - Program to create linked list
* [Find kth node from end](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/kth_node_from_end.py) - Program to find kth node from the end of linked list
* [Swap k beginning and k end](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/swap_k_beginning_and_k_end.py) - Swap elements at k position from beginning and end
* [Swap alternate nodes](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/swap_alternate_nodes.py) - Swap alternate nodes in a linked list
* [Add two numbers](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/add_two_numbers_in_linked_list.py) - Add two numbers which are represented in the form of linked list
* [Check palindrome](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/check_if_linklist_is_palindrome.py) - Check if linked list is a palindrome
* [Delete alternate nodes](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/delete_alternate_nodes.py) - Delete alternate nodes in a linked list
* [Delete m after n](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/delete_m_after_n.py) - Delete m nodes after n nodes
* [Common intersection of two linked list](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/common_intersection_of_two_linked_list.py) - Find intersection of two sorted linked list
* [Detect and remove loop](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/detect_and_remove_loop.py) - Detect and remove loop in a linked list
* [Alternate merge](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/alternate_merge.py) - Alternately merge the elements of two given linked lists into a single list.
* [Rotate a linked list](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/rotate_linked_list.py) - Rotate a linked list
* [Reverse alternate k nodes](https://github.com/charulagrl/Data-Structures-and-Algorithms/blob/master/Linked%20List/reverse_alternate_k_nodes.py) - Reverse alternate k nodes in a linked list